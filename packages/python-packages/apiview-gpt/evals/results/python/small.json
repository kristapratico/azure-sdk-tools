[
    {
        "testcase": "few_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ constructor and instead provide a separate factory classmethod (e.g. from_connection_string) that creates an instance from a connection string.",
                    "comment": "The constructor of ImageAnalysisClient in the sync namespace accepts a connection_string argument, which violates the guideline that the __init__ method must not take a connection string."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove duplicate model definitions in the aio sub-namespace. The PeopleResult model should be defined only once (in the root models namespace) and reused in both sync and async clients.",
                    "comment": "Defining PeopleResult in the azure.ai.vision.imageanalysis.models.aio namespace duplicates models between sync and async packages, which violates the guideline against duplicating models between the root and aio namespaces."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ method and, if connection-string support is needed, add a separate factory classmethod (e.g. from_connection_string) that creates an instance using the provided connection string.",
                    "comment": "According to the guidelines, the client constructor must not accept a connection string. A separate factory method should be provided instead."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Define PeopleResult only once in the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio submodule.",
                    "comment": "Models should not be duplicated between the root and aio namespaces. Including a PeopleResult in the aio namespace violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 92,
                    "bad_code": "def send_request(",
                    "suggestion": "Declare send_request as an async method by using 'async def send_request(...):' to properly support async/await.",
                    "comment": "Async client methods must be defined with async/await syntax. The send_request method in the async client should be declared as 'async def' rather than a synchronous def."
                }
            ]
        },
        "total_violations": 2,
        "violations_found": 3,
        "true_positives": 2,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 100,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded and complete, accurately addressing all the guidelines provided in the CONTEXT without introducing unsupported information or omitting critical details.",
        "overall_score": 88
    },
    {
        "testcase": "many_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the constructor and implement a separate factory method (e.g. from_connection_string) to create the client using a connection string.",
                    "comment": "The constructor must not accept a connection string; using a factory method for connection string support is required by the guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to ImageAnalysisClient (i.e. without the 'Async' prefix) and keep it under the 'azure.ai.vision.imageanalysis.aio' namespace so that both sync and async clients share the same client name.",
                    "comment": "Async and sync clients must share the same client name; adding an 'Async' prefix violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Move PeopleResult to the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio sub-namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "tags = \"tags\"",
                    "suggestion": "Rename the enum member to use UPPERCASE (e.g., TAGS = \"tags\") in accordance with the guidelines.",
                    "comment": "Enum member names must be in UPPERCASE to comply with naming conventions."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace the get_result/set_result methods with a property (with a getter and setter) to expose the result, for example, using @property and @result.setter.",
                    "comment": "Simple getter and setter functions are discouraged; properties should be used instead."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace the set_result method with a property setter (e.g., @result.setter def result(self, value): ...).",
                    "comment": "Simple setter methods should be implemented as property setters."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to DetectedPerson (using PascalCase) to adhere to type naming conventions.",
                    "comment": "Type names should be in PascalCase; 'detectedPerson' violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the staticmethod decorator and refactor send_request as an instance method or a module-level function.",
                    "comment": "Static methods are discouraged; module-level functions or instance methods should be used instead."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required positional parameters so that all optional parameters are keyword-only. For example:\n\n  def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation\u2010specific parameters must be keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-constructor-api-version-argument-1"
                    ],
                    "line_no": 54,
                    "bad_code": "def __init__(\n        self, \n        endpoint: str, \n        credential: Union[AzureKeyCredential, AsyncTokenCredential], \n    ) -> None",
                    "suggestion": "Add an optional keyword-only api_version parameter to the async client __init__ signature, for example: \n    def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, AsyncTokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The async client constructor is missing the optional api_version parameter required by the guidelines."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the 'connection_string' parameter from the constructor and implement a separate factory method (e.g. from_connection_string) that accepts a connection string.",
                    "comment": "The client constructor must not accept a connection string; connection strings should be handled via a dedicated factory method."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client class to 'ImageAnalysisClient' so that both sync and async clients share the same name (with the async client residing in the .aio namespace).",
                    "comment": "Sync and async clients must have the same client name, differing only by namespace to meet the SDK guidelines."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the @staticmethod decorator and define 'send_request' as an instance method, or refactor it into a module\u2010level function.",
                    "comment": "Static methods should be avoided in public APIs; use instance methods or module functions instead."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "tags = 'tags'",
                    "suggestion": "Rename the enum member to 'TAGS = \"tags\"' so that all enum members are in uppercase.",
                    "comment": "Enumeration member names must be in all uppercase as per the guidelines."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to 'DetectedPerson' to follow PascalCase naming conventions for types.",
                    "comment": "Type names should be in PascalCase."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace the getter method with a property (for example, use @property def result(self) -> ObjectsResult: ...).",
                    "comment": "Simple getter methods should be implemented as properties."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace the setter method with a property setter (for example, use @result.setter def result(self, obj): ...).",
                    "comment": "Simple setter methods should be implemented via property setters instead of standalone methods."
                }
            ]
        },
        "total_violations": 10,
        "violations_found": 7,
        "true_positives": 7,
        "false_positives": 0,
        "false_negatives": 3,
        "percent_coverage": 70,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately identifying and addressing violations of the guidelines provided. It does not introduce unsupported information or omit any critical details, making it a complete and faithful representation of the CONTEXT.",
        "overall_score": 61
    },
    {
        "testcase": "no_violations",
        "expected": {
            "status": "Success",
            "violations": []
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 91,
                    "bad_code": "def send_request(",
                    "suggestion": "async def send_request(self, request: HttpRequest, *, stream: bool = False, **kwargs: Any) -> AsyncHttpResponse:",
                    "comment": "In the async client the send_request method must be declared with the async/await syntax. Defining it as a normal function (even if its return type is an Awaitable) violates the guideline to use async def for asynchronous operations."
                }
            ]
        },
        "total_violations": 0,
        "violations_found": 1,
        "true_positives": 0,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 1,
        "groundedness": 1,
        "groundedness_reason": "The RESPONSE is completely ungrounded because there is no CONTEXT provided to support or relate to the information in the RESPONSE.",
        "overall_score": 0
    },
    {
        "testcase": "multiple_same_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation-specific parameters should be provided as keyword-only arguments. Inserting the '*' after the required parameters forces callers to use parameter names."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be keyword-only; add '*' after required parameters in the method signature."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "For async methods, optional parameters must also be keyword-only. Insert '*' to force keyword-only usage."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be made keyword-only by inserting '*' after the required parameters."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 20,
                    "bad_code": "gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Insert a '*' after the required parameters in the method signature so that the optional parameters are keyword-only. For example:\n\ndef analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = None, language: Optional[str] = None, model_version: Optional[str] = None, smart_crops_aspect_ratios: Optional[List[float]] = None, **kwargs: Any) -> ImageAnalysisResult:",
                    "comment": "Optional operation-specific arguments in the sync 'analyze' method should be keyword-only as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 32,
                    "bad_code": "gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Insert a '*' in the parameter list of the method so that the optional parameters become keyword-only. For example:\n\ndef analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = None, language: Optional[str] = None, model_version: Optional[str] = None, smart_crops_aspect_ratios: Optional[List[float]] = None, **kwargs: Any) -> ImageAnalysisResult:",
                    "comment": "Optional operation-specific arguments in the sync 'analyze_from_url' method should be keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 66,
                    "bad_code": "gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Add a '*' after the required parameters so that the optional parameters are forced to be keyword-only. For example:\n\nasync def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = None, language: Optional[str] = None, model_version: Optional[str] = None, smart_crops_aspect_ratios: Optional[List[float]] = None, **kwargs: Any) -> ImageAnalysisResult:",
                    "comment": "Optional parameters in the async 'analyze' method must be defined as keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 78,
                    "bad_code": "gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Modify the async 'analyze_from_url' signature to include a '*' so that optional parameters are keyword-only. For example:\n\nasync def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = None, language: Optional[str] = None, model_version: Optional[str] = None, smart_crops_aspect_ratios: Optional[List[float]] = None, **kwargs: Any) -> ImageAnalysisResult:",
                    "comment": "Optional parameters in the async 'analyze_from_url' method should be keyword-only as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 87,
                    "bad_code": "def send_request(",
                    "suggestion": "Define the asynchronous 'send_request' method using 'async def' rather than 'def'. For example:\n\nasync def send_request(self, request: HttpRequest, *, stream: bool = False, **kwargs: Any) -> AsyncHttpResponse:",
                    "comment": "Async client methods must be defined with the async/await syntax."
                }
            ]
        },
        "total_violations": 4,
        "violations_found": 5,
        "true_positives": 0,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 4,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                28,
                32
            ],
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                74,
                78
            ],
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                16,
                20
            ],
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                62,
                66
            ]
        ],
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately reflects the CONTEXT by addressing the issue of optional arguments needing to be keyword-only and provides specific examples and corrections, without introducing unsupported information or omitting critical details.",
        "overall_score": 32
    },
    {
        "average_score": 45.25,
        "total_evals": 4
    }
]